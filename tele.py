import telebot
import time
import pyowm
import re
import datetime
import os
import requests
from xml.dom.minidom import parseString
from hashlib import md5,sha1
from requests import post
from geopy.geocoders import Nominatim
from telebot import apihelper
from scipy import spatial
from geopy.geocoders import Nominatim
import json

COMMANDS = ['–î–æ–º –∏–Ω—Ñ–æ','–ò–Ω—Ñ–æ','–ö—Ç–æ –±—É–¥–µ—Ç?','–ì–µ–æ–ª–æ–∫–∞','–ü–ª–∞—Ç–µ–∂–∏','–ü–æ–≥–æ–¥–∫–∞', '–ë—é–¥–∂–µ—Ç']
geolocator = Nominatim(user_agent="tusabot")
q = False
bot = telebot.TeleBot("1054227476:AAHMD3T4QOhQnJ1oBfLYaYI64Rx8O4dKWX8")
keyboard1 = telebot.types.ReplyKeyboardMarkup()
delkey = telebot.types.ReplyKeyboardRemove()
key1 = telebot.types.KeyboardButton('–¥–æ–º –∏–Ω—Ñ–æ')
key2 = telebot.types.KeyboardButton('–∏–Ω—Ñ–æ')
key3 = telebot.types.KeyboardButton('–∫—Ç–æ –±—É–¥–µ—Ç?')
key4 = telebot.types.KeyboardButton('–≥–µ–æ–ª–æ–∫–∞')
key5 = telebot.types.KeyboardButton('–ø–ª–∞—Ç–µ–∂–∏')
key6 = telebot.types.KeyboardButton('–±—é–¥–∂–µ—Ç')
key7 = telebot.types.KeyboardButton('–ø–æ–≥–æ–¥–∫–∞')
key8 = telebot.types.KeyboardButton('—è –±—É–¥—É')
key9 = telebot.types.KeyboardButton('–∫—Ç–æ —Å–∫–∏–Ω—É–ª')
key10 = telebot.types.KeyboardButton('–±–ª—è—É —É –º–µ–Ω—è —Ç–æ–∫ –Ω–∞–ª–∏—á–∫–∞')
keyboard1.row(key1, key2)
keyboard1.row(key3, key8)
keyboard1.row(key5, key6)
keyboard1.row(key7, key4)
keyboard1.row(key9, key10)


def terminal(message):
    message = message.text
    global q
    if message is not None:
        if message.startswith('&'):
            message += ' –ö–∏–µ–≤' 
            url = 'https://api.privatbank.ua/p24api/infrastructure?json&tso&address=&city=%s' % ('–ö–∏–µ–≤')    
            req = requests.get(url).json()
            location = geolocator.geocode(message, language='ru')
            if location is not None:
                lat = location.latitude
                lon = location.longitude
                A = [(lat, lon)]
                list_cord = []

                for i in range(len(req['devices'])):
                    lon_d = float(req['devices'][i]['latitude'])
                    lat_d = float(req['devices'][i]['longitude'])
                    B = (lat_d,lon_d)
                    list_cord.append(B)
                
                distance,index = spatial.KDTree(list_cord).query(A)
                with open('term.txt', 'w') as f:
                    f.write(str(list_cord[index[0]][0]))
                    f.write(' ')
                    f.write(str(list_cord[index[0]][1]))
                q = True

            

def date_sd():
    now = datetime.datetime.now()
    month = now.month - 1
    year = now.year
    if month == 0:
        month = 12
        year -= 1
    sd = str(now.day) + '.'
    if month < 10:
        sd += '0' 
    sd += str(month) + '.' + str(year)
    return sd

def date_ed():
    now = str(datetime.datetime.now()).split()[0]
    edlist = now.split('-')
    edlist.reverse()
    ed = '.'.join(edlist)
    return ed


def privat_bank_payment(password,proxyDict, idi):
    sd = date_sd()
    ed = date_ed()
    url = "https://api.privatbank.ua/p24api/rest_fiz"

    head = """<?xml version="1.0" encoding="UTF-8"?>
    <request version="1.0">
    <merchant>
        <id>%s</id>
        <signature>""" % idi

    data = """<oper>cmt</oper>
        <wait>0</wait>
        <test>0</test>
        <payment id="">
            <prop name="sd" value="%s" />
            <prop name="ed" value="%s" />
            <prop name="card" value="5168745302334229" />
        </payment>""" % (sd, ed)

    end_head = """</signature>
    </merchant>
    <data>
        """

    footer = """
    </data>
    </request>"""

    # === –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ö–ª—é—á–∞ ====================================
    signature_md5 = md5((data+password).encode('utf-8')).hexdigest()
    signature_done = sha1(signature_md5.encode('utf-8')).hexdigest()

    data_done = head + signature_done + end_head + data + footer

    # === –ó–∞–ø—Ä–æ—Å
    res = post(url, data=data_done, headers={'Content-Type': 'application/xml; charset=UTF-8'}, proxies=proxyDict)
    dom = parseString(res.text)
    # # –ü–∞—Ä—Å–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–µ–πs
    finalprint = ''
    payment = dom.getElementsByTagName('statement')
    leny = len(payment)
    i = 0
    for pay in payment:
        finalprint += ' üí≥ üí≥ üí≥ '
        finalprint += pay.getAttribute('trandate')
        finalprint += ' : '
        finalprint += pay.getAttribute('cardamount')
        finalprint += ' : '
        try:
            finalprint += pay.getAttribute('description')
        except:
            finalprint += ' '
        finalprint += '\n'
        if i == leny // 2:
            finalprint += '*'
    
    fp = ''
    for pay in payment:
        fp = pay.getAttribute('description') + ' - ' + pay.getAttribute('cardamount')
        q = open('whobe2.txt', 'r')
        alltext = q.read()
        if not finalprint in alltext:
            q.close()
            if fp.startswith('@'):
                f = open('whobe2.txt', 'a')
                f.write(fp)
                f.write('\n')
                f.close()
    
    return finalprint

def privat_bank (password,proxyDict,idi):

    url = "https://api.privatbank.ua/p24api/balance"

    head = """<?xml version="1.0" encoding="UTF-8"?>
    <request version="1.0">
    <merchant>
        <id>%s</id>
        <signature>""" % idi

    data = """<oper>cmt</oper>
        <wait>0</wait>
        <test>0</test>
        <payment id="">
        <prop name="cardnum" value="5168745302334229" />
        <prop name="country" value="UA" />
        </payment>"""

    end_head = """</signature>
    </merchant>
    <data>
        """

    footer = """
    </data>
    </request>"""

    # === –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ö–ª—é—á–∞ ====================================
    signature_md5 = md5((data+password).encode('utf-8')).hexdigest()
    signature_done = sha1(signature_md5.encode('utf-8')).hexdigest()

    data_done = head + signature_done + end_head + data + footer

    # === –ó–∞–ø—Ä–æ—Å
    res = post(url, data=data_done, headers={'Content-Type': 'application/xml; charset=UTF-8'}, proxies=proxyDict)
    dom = parseString(res.text)
    # –ü–∞—Ä—Å–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞
    balancetag = dom.getElementsByTagName('balance')[0].toxml()
    balance = re.findall(r'[-+]?(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?',balancetag)

    return balance[0]

def pogodka():
	owm = pyowm.OWM(os.getenv('API_WEATHER'), language='ru')
	observation = owm.weather_at_place("–ö–∏—ó–≤")
	w = observation.get_weather()
	temp = w.get_temperature('celsius')["temp"]

	pogodka = ("–ù–∞ —Ç—É—Å–æ–≤–æ—á–∫–µ –±—É–¥–µ—Ç : " + w.get_detailed_status() 
			+ "\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫–æ–ª–æ : " + str(temp) + " –≥—Ä–∞–¥—É—Å–æ–≤")
	return pogodka

def setinfo(message):
    a = message.split(' ', maxsplit = 1)[1]
    return a

def get_info(message):
	f = open('info.txt', 'w')
	f.write(message.text)
	f.close()

def get_locate(message):
	f = open('locate.txt', 'w')
	f.write(message.text)
	f.close()

def get_home(message):
	f = open('home.txt', 'w')
	f.write(message.text)
	f.close()

def get_who(message):
	if not " " in message.text:
		q = open('whobe.txt', 'r')
		alltext = q.read()
		if not message.text in alltext:
			q.close()
			if message.text.startswith('@'):
				f = open('whobe.txt', 'a')
				f.write(message.text)
				f.write('\n')
				f.close()


def get_who2(message):
	q = open('whobe2.txt', 'r')
	alltext = q.read()
	if not message.text in alltext:
		q.close()
		if message.text.startswith('@'):
			f = open('whobe2.txt', 'a')
			f.write(message.text)
			f.write('\n')
			f.close()

@bot.message_handler(commands = ['start', 'help', 'setinfo', 'setlocate'])
def handle_start_help(message):
	if message.text.startswith('/start') == True:
		bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=keyboard1)
	elif message.text == "/help":
		bot.send_message(message.chat.id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥: " 
				+ ', '.join(COMMANDS) + ". –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±—É—é –∏–∑ –Ω–∏—Ö")
	elif message.text == '/setinfo':
		bot.send_message(message.chat.id, "–ê —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤—å –∏–Ω—Ñ—É !")
		bot.register_next_step_handler(message, get_info)
	elif message.text == '/setlocate':
		bot.send_message(message.chat.id, "–ê —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤—å –∞–¥—Ä–µ—Å !")
		bot.register_next_step_handler(message, get_locate)
	elif message.text == '/sethome':
		bot.send_message(message.chat.id, "–ê —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤—å –¥–æ–º –∏–Ω—Ñ–æ !")
		bot.register_next_step_handler(message, get_home)

@bot.message_handler(content_types = ['text'])
def main_option(message):
	proxyDict = { 
			"http"  : os.environ.get('FIXIE_URL', ''), 
			"https" : os.environ.get('FIXIE_URL', '')}
	if message.text.lower() == '–ø–æ–≥–æ–¥–∫–∞':
		# bot.send_message(message.chat.id, pogodka(),reply_markup=delkey)
		bot.send_message(message.chat.id , "–ù–∞ —Ç—É—Å–æ–≤–æ—á–∫–µ –±—É–¥–µ—Ç : —è—Å–Ω–æ"
			+ "\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫–æ–ª–æ : 32.5 –≥—Ä–∞–¥—É—Å–æ–≤",reply_markup=delkey)
	elif message.text == '–¥–æ–º –∏–Ω—Ñ–æ':
		f = open('home.txt', 'r')
		fd = f.read()
		try:
			bot.send_message(message.chat.id, fd,reply_markup=delkey)
		except:
			bot.send_message(message.chat.id, "–ø–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ –ø–∏–¥–æ—Ä /setinfo",reply_markup=delkey)
		f.close()
	elif message.text.startswith('@') == True:
		get_who(message)
	elif message.text.lower() == '–±—é–¥–∂–µ—Ç':
		try:
			bot.send_message(message.chat.id, "–ë—é–¥–∂–µ—Ç —Ç—É—Å–æ–≤–æ—á–∫–∏ üí¥ üí¥ üí¥ " + privat_bank(os.getenv('API_PRIVAT'), proxyDict, "153753") + " –≥—Ä—É–≤–Ω–µ–≤",reply_markup=delkey)
		except:
			try:
				bot.send_message(message.chat.id, "–ë—é–¥–∂–µ—Ç —Ç—É—Å–æ–≤–æ—á–∫–∏ üí¥ üí¥ üí¥ " + privat_bank(os.getenv('API_PRIVAT2'),proxyDict, "155325") + " –≥—Ä—É–≤–Ω–µ–≤",reply_markup=delkey)
			except:
				bot.send_message(message.chat.id, 'C–µ—Ä–≤–µ—Ä –≤—ã–µ–±—ã–≤–∞–µ—Ç—å—Å—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî üòî üòî',reply_markup=delkey)
	elif message.text.lower() == '—è –±—É–¥—É':
		bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–∏–∫ !",reply_markup=delkey)
	elif message.text.lower() == '–∏–Ω—Ñ–æ':
		f = open('info.txt', 'r')
		fd = f.read()
		try:
			bot.send_message(message.chat.id, fd,reply_markup=delkey)
		except:
			bot.send_message(message.chat.id, "–ø–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ –ø–∏–¥–æ—Ä /setinfo",reply_markup=delkey)
		f.close()
	elif message.text.lower() == '–∫—Ç–æ –±—É–¥–µ—Ç?':
		f = open('whobe.txt', 'r')
		whobefd = f.read()
		try:
			bot.send_message(message.chat.id, whobefd,reply_markup=delkey)
		except:
			bot.send_message(message.chat.id, "–ù–∏–∫–æ–≥–æ",reply_markup=delkey)
		f.close()
	elif message.text.lower() == '–≥–µ–æ–ª–æ–∫–∞':
		f = open('locate.txt', 'r')
		adresfd = f.read()
		try:
			location = geolocator.geocode(adresfd, language='ru')
			bot.send_location(message.chat.id, location.latitude, location.longitude)
		except:
			bot.send_message(message.chat.id, 'C–µ—Ä–≤–µ—Ä –≤—ã–µ–±—ã–≤–∞–µ—Ç—å—Å—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî üòî üòî',reply_markup=delkey)
		f.close()
	elif message.text.lower() == '–ø–ª–∞—Ç–µ–∂–∏':
		try:
			pri = privat_bank_payment(os.getenv('API_PRIVAT'),proxyDict, "153753")
			pri_list = pri.split('*')
			for i in pri_list:
				bot.send_message(message.chat.id, i ,reply_markup=delkey)
		except:
			pri = privat_bank_payment(os.getenv('API_PRIVAT2'),proxyDict, "155325")
			pri_list = pri.split('*')
			for i in pri_list:
				bot.send_message(message.chat.id, i ,reply_markup=delkey)
	elif message.text.lower() == 'ip':
		rer = requests.get('https://ramziv.com/ip', proxies=proxyDict).text
		bot.send_message(message.chat.id, rer,reply_markup=delkey)
	elif message.text.lower() == 'rm -rf':
		f = open('whobe.txt','w')
		f.close()
	elif message.text.lower() == '–±–ª—è—É —É –º–µ–Ω—è —Ç–æ–∫ –Ω–∞–ª–∏—á–∫–∞':
		bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∞–¥—Ä–µ—Å —Ñ–æ—Ä–º–∞—Ç–∞ &–•—Ä–µ—â–∞—Ç–∏–∫ 12",reply_markup=delkey)
		global q
		while q == False:
			bot.register_next_step_handler(message, terminal)
			time.sleep(4)
		with open('term.txt', 'r') as f:
			lonlat = f.read().split()
			try:
				bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å —Å—É—á–∞—Ä–∞ –ø–æ–ª—É—á–∏ –±–ª–∏–∂–∞–π—à–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª –±–µ–∑ –∫–æ–º–º–∏—Å–∏–∏ !\n–ü–∏–∑–¥—É–π –ø–æ–ø–æ–ª–Ω—è–π",reply_markup=delkey)
				bot.send_location(message.chat.id, lonlat[0], lonlat[1])
				q = False
			except:
				bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å")
		f = open('term.txt','w')
		f.close()
	elif message.text.lower() == '—Å–∫–∏–Ω—É–ª':
		bot.register_next_step_handler(message, get_who2)
	elif message.text.lower() == 'check':
		try:
			bot.send_message(message.chat.id, privat_bank_payment(os.getenv('API_PRIVAT'),proxyDict, "153753"),reply_markup=delkey)
		except:
			bot.send_message(message.chat.id, privat_bank_payment(os.getenv('API_PRIVAT2'),proxyDict, "155325"),reply_markup=delkey)
	elif message.text.lower() == '–∫—Ç–æ —Å–∫–∏–Ω—É–ª':
		f = open('whobe2.txt', 'r')
		whobefd = f.read()
		try:
			bot.send_message(message.chat.id, whobefd,reply_markup=delkey)
		except:
			bot.send_message(message.chat.id, "–ù–∏–∫—Ç–æ",reply_markup=delkey)
		f.close()

bot.polling(none_stop=True)
