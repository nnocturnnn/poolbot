import telebot
import time
import pyowm
import re
import datetime
import os
import requests
from xml.dom.minidom import parseString
from hashlib import md5,sha1
from requests import post
from geopy.geocoders import Nominatim
from telebot import apihelper

COMMANDS = ['–î–æ–º –∏–Ω—Ñ–æ','–ò–Ω—Ñ–æ','–ö—Ç–æ –±—É–¥–µ—Ç?','–ì–µ–æ–ª–æ–∫–∞','–ü–ª–∞—Ç–µ–∂–∏','–ü–æ–≥–æ–¥–∫–∞', '–ë—é–¥–∂–µ—Ç']
geolocator = Nominatim(user_agent="tusabot")
bot = telebot.TeleBot(os.getenv('API_TELEGRAM'))
keyboard1 = telebot.types.ReplyKeyboardMarkup()
key1 = telebot.types.KeyboardButton('–¥–æ–º –∏–Ω—Ñ–æ')
key2 = telebot.types.KeyboardButton('–∏–Ω—Ñ–æ')
key3 = telebot.types.KeyboardButton('–∫—Ç–æ –±—É–¥–µ—Ç?')
key4 = telebot.types.KeyboardButton('–≥–µ–æ–ª–æ–∫–∞')
key5 = telebot.types.KeyboardButton('–ø–ª–∞—Ç–µ–∂–∏')
key6 = telebot.types.KeyboardButton('–±—é–¥–∂–µ—Ç')
key7 = telebot.types.KeyboardButton('–ø–æ–≥–æ–¥–∫–∞')
key8 = telebot.types.KeyboardButton('—è –±—É–¥—É')
keyboard1.row(key1, key2)
keyboard1.row(key3, key8)
keyboard1.row(key5, key6)
keyboard1.row(key7, key4)

def date_sd():
    now = datetime.datetime.now()
    month = now.month - 1
    year = now.year
    if month == 0:
        month = 12
        year -= 1
    sd = str(now.day) + '.'
    if month < 10:
        sd += '0' 
    sd += str(month) + '.' + str(year)
    return sd

def date_ed():
    now = str(datetime.datetime.now()).split()[0]
    edlist = now.split('-')
    edlist.reverse()
    ed = '.'.join(edlist)
    return ed

def privat_bank_payment(password,proxyDict):
    sd = date_sd()
    ed = date_ed()
    url = "https://api.privatbank.ua/p24api/rest_fiz"

    head = """<?xml version="1.0" encoding="UTF-8"?>
    <request version="1.0">
    <merchant>
        <id>153753</id>
        <signature>"""

    data = """<oper>cmt</oper>
        <wait>0</wait>
        <test>0</test>
        <payment id="">
            <prop name="sd" value="%s" />
            <prop name="ed" value="%s" />
            <prop name="card" value="5168745302334229" />
        </payment>""" % (sd, ed)

    end_head = """</signature>
    </merchant>
    <data>
        """

    footer = """
    </data>
    </request>"""

    # === –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ö–ª—é—á–∞ ====================================
    signature_md5 = md5((data+password).encode('utf-8')).hexdigest()
    signature_done = sha1(signature_md5.encode('utf-8')).hexdigest()

    data_done = head + signature_done + end_head + data + footer

    # === –ó–∞–ø—Ä–æ—Å
    res = post(url, data=data_done, headers={'Content-Type': 'application/xml; charset=UTF-8'}, proxies=proxyDict)
    dom = parseString(res.text)
    # # –ü–∞—Ä—Å–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–µ–πs
    finalprint = ''
    payment = dom.getElementsByTagName('statement')
    for pay in payment:
        finalprint += ' üí≥ üí≥ üí≥ '
        finalprint += pay.getAttribute('trandate')
        finalprint += ' : '
        finalprint += pay.getAttribute('cardamount')
        finalprint += ' : '
        try:
            finalprint += pay.getAttribute('description')
        except:
            finalprint += ' '
        finalprint += '\n'
    
    return finalprint

def privat_bank (password,proxyDict):

    url = "https://api.privatbank.ua/p24api/balance"

    head = """<?xml version="1.0" encoding="UTF-8"?>
    <request version="1.0">
    <merchant>
        <id>153753</id>
        <signature>"""

    data = """<oper>cmt</oper>
        <wait>0</wait>
        <test>0</test>
        <payment id="">
        <prop name="cardnum" value="5168745302334229" />
        <prop name="country" value="UA" />
        </payment>"""

    end_head = """</signature>
    </merchant>
    <data>
        """

    footer = """
    </data>
    </request>"""

    # === –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ö–ª—é—á–∞ ====================================
    signature_md5 = md5((data+password).encode('utf-8')).hexdigest()
    signature_done = sha1(signature_md5.encode('utf-8')).hexdigest()

    data_done = head + signature_done + end_head + data + footer

    # === –ó–∞–ø—Ä–æ—Å
    res = post(url, data=data_done, headers={'Content-Type': 'application/xml; charset=UTF-8'}, proxies=proxyDict)
    dom = parseString(res.text)
    # –ü–∞—Ä—Å–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞
    balancetag = dom.getElementsByTagName('balance')[0].toxml()
    balance = re.findall(r'\d.\d{2}',balancetag)

    return balance[0]

def pogodka():
	owm = pyowm.OWM(os.getenv('API_WEATHER'), language='ru')
	observation = owm.weather_at_place("–ö–∏—ó–≤")
	w = observation.get_weather()
	temp = w.get_temperature('celsius')["temp"]

	pogodka = ("–í –ö–∏–π–æ–≤–µ —Å–µ–π—á–∞—Å : " + w.get_detailed_status() 
			+ "\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫–æ–ª–æ : " + str(temp) + " –≥—Ä–∞–¥—É—Å–æ–≤")
	return pogodka

def setinfo(message):
    a = message.split(' ', maxsplit = 1)[1]
    return a

def get_info(message):
	f = open('info.txt', 'w')
	f.write(message.text)
	f.close()

def get_locate(message):
	f = open('locate.txt', 'w')
	f.write(message.text)
	f.close()

def get_who(message):
	f = open('whobe.txt', 'a')
	f.write(message.text)
	f.write('\n')
	f.close


@bot.message_handler(commands = ['start', 'help', 'setinfo', 'setlocate'])
def handle_start_help(message):
	if message.text == "/start":
		bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=keyboard1)
		f = open('whobe.txt', 'w')
		f.close()
	elif message.text == "/help":
		bot.send_message(message.chat.id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥: " 
				+ ', '.join(COMMANDS) + ". –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±—É—é –∏–∑ –Ω–∏—Ö")
	elif message.text == '/setinfo':
		bot.send_message(message.chat.id, "–ê —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤—å –∏–Ω—Ñ—É !")
		bot.register_next_step_handler(message, get_info)
	elif message.text == '/setlocate':
		bot.send_message(message.chat.id, "–ê —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤—å –∞–¥—Ä–µ—Å !")
		bot.register_next_step_handler(message, get_locate)

@bot.message_handler(content_types = ['text'])
def main_option(message):
	proxyDict = { 
			"http"  : os.environ.get('FIXIE_URL', ''), 
			"https" : os.environ.get('FIXIE_URL', '')}
	if message.text.lower() == '–ø–æ–≥–æ–¥–∫–∞':
		bot.send_message(message.chat.id, pogodka())
	elif message.text.lower() == '–±—é–¥–∂–µ—Ç':
		try:
			bot.send_message(message.chat.id, "–ë—é–¥–∂–µ—Ç —Ç—É—Å–æ–≤–æ—á–∫–∏ üí¥ üí¥ üí¥ " 
			+ privat_bank(os.getenv('API_PRIVAT'),proxyDict) + " –≥—Ä—É–≤–Ω–µ–≤")
		except:
			bot.send_message(message.chat.id, 'C–µ—Ä–≤–µ—Ä –≤—ã–µ–±—ã–≤–∞–µ—Ç—å—Å—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî üòî üòî')
	elif message.text == '—è –±—É–¥—É':
		man = message.from_user.id
		bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–∏–∫ !")
		if man == message.from_user.id:
			bot.register_next_step_handler(message, get_who)
	elif message.text.lower() == '–∏–Ω—Ñ–æ':
		f = open('info.txt', 'r')
		fd = f.read()
		bot.send_message(message.chat.id, fd)
		f.close()
	elif message.text.lower() == '–∫—Ç–æ –±—É–¥–µ—Ç?':
		f = open('whobe.txt', 'r')
		whobefd = f.read()
		bot.send_message(message.chat.id, whobefd)
		f.close()
	elif message.text.lower() == '–≥–µ–æ–ª–æ–∫–∞':
		f = open('locate.txt', 'r')
		adresfd = f.read()
		try:
			location = geolocator.geocode(adresfd, language='ru')
			bot.send_location(message.chat.id, location.latitude, location.longitude)
		except:
			bot.send_message(message.chat.id, 'C–µ—Ä–≤–µ—Ä –≤—ã–µ–±—ã–≤–∞–µ—Ç—å—Å—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî üòî üòî')
		f.close()
	elif message.text.lower() == '–ø–ª–∞—Ç–µ–∂–∏':
		try:
			bot.send_message(message.chat.id, privat_bank_payment(os.getenv('API_PRIVAT'),proxyDict))
		except:
			bot.send_message(message.chat.id, 'C–µ—Ä–≤–µ—Ä –≤—ã–µ–±—ã–≤–∞–µ—Ç—å—Å—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî üòî üòî')
	elif message.text.lower() == 'ip':
		rer = requests.get('https://ramziv.com/ip', proxies=proxyDict).text
		bot.send_message(message.chat.id, rer)


bot.polling(none_stop=True)
