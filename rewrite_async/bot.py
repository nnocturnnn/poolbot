import logging
import banking
import other
import db
import key as kb
import os
import requests
from geopy.geocoders import Nominatim
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import BoundFilter


class Test(StatesGroup):
	info = State()
	locale = State()
	date = State()
	price = State()
	cardprivate = State()
	cardmono = State()

class MyFilter(BoundFilter):
    key = 'is_admin'

    def __init__(self, is_admin):
        self.is_admin = is_admin

    async def check(self, message: types.Message):
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.is_chat_admin()


API_TOKEN = '1054227476:AAFxca-TgwEhtfJlRuVkdBQw4zXF66KZ9eQ'
logging.basicConfig(level=logging.INFO)
geolocator = Nominatim(user_agent="tusabot")
idi = ""
kik_count = 0

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())
dp.filters_factory.bind(MyFilter)

async def check(message: types.Message):
	member = await bot.get_chat_member(message.chat.id, message.from_user.id)
	return member.is_chat_admin()


@dp.message_handler(state=Test.info)
async def info_state(message: types.Message, state: FSMContext):
	answer = message.text
	db.insert_db(message.chat.id,info=answer)
	await bot.unpin_all_chat_messages(message.chat.id)
	await bot.pin_chat_message(message.chat.id, message.message_id)
	await state.finish()

@dp.message_handler(state=Test.locale)
async def locale_state(message: types.Message, state: FSMContext):
	answer = message.text
	db.insert_db(message.chat.id,locale=answer.lower())
	await state.finish()

@dp.message_handler(state=Test.date)
async def date_state(message: types.Message, state: FSMContext):
	answer = message.text
	db.insert_db(message.chat.id,date=answer.lower())
	await state.finish()

@dp.message_handler(state=Test.price)
async def price_state(message: types.Message, state: FSMContext):
	answer = message.text
	db.insert_db(message.chat.id,price=answer.lower())
	await state.finish()

@dp.message_handler(state=Test.cardprivate)
async def cardprivate_state(message: types.Message, state: FSMContext):
	answer = message.text
	db.insert_db(message.chat.id,private=answer.lower())
	await state.finish()

@dp.message_handler(state=Test.cardmono)
async def ccardmono_state(message: types.Message, state: FSMContext):
	answer = message.text
	db.insert_db(message.chat.id,mono=answer.lower())
	await state.finish()



@dp.message_handler(is_admin=True,commands=['start', 'help', 'setinfo',
					'setlocale', 'setdate', 'setprice','setcardinfo','delete'])
async def send_command(message: types.Message):
	if check(message):
		if message.text.lower().startswith('/start'):
			db.insert_db(message.chat.id)
			await message.answer( f'{message.from_user.first_name} , –¥–æ–±—Ä–æ \
–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ PartyBot!\n–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Å—å –∫ –ø–æ–º–æ—â–∏ /help\n')
		elif message.text.lower() == "/help":
			await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—É—Å–æ–≤–æ—á–∫—É\n\
/setinfo - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—É—Å–æ–≤–æ—á–∫–∏\n/setlocale - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ\n\
/setdate - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É\n/setprice - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É\n/setcardinfo \
			- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π (Monobank, PrivatBank)")
		elif message.text.lower() == "/setinfo":
			await message.answer("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Å–æ–≤–æ—á–∫–µ!")
			await Test.info.set()
		elif message.text.lower() == "/setlocale":
			kb.inline_btn_1.callback_data = "btn1 " + str(message.message_id) + " " + str(message.from_user.id)
			kb.inline_btn_2.callback_data = "btn2 " + str(message.message_id) + " "  + str(message.from_user.id)
			await message.answer("–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞",reply_markup=kb.inline_kb_variant_addres)
		elif message.text.lower() == "/setdate":
			await message.answer("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ç—É—Å–æ–≤–æ—á–∫–∏!\n–ù–∞–ø—Ä–∏–º–µ—Ä 17.03")
			await Test.date.set()
		elif message.text.lower() == "/setprice":
			await message.answer("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–¥–∫–∏ –Ω–∞ —Ç—É—Å–æ–≤–æ—á–∫—É!")
			await Test.price.set()
		elif message.text.lower() == "/setcardinfo":
			await message.answer("–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –±–∞–Ω–∫!",reply_markup=kb.bank_kb)
			kb.mono.callback_data = "monokey " + str(message.message_id) + " " + str(message.from_user.id)
			kb.private.callback_data = "privatekey " + str(message.message_id) + " "  + str(message.from_user.id)
		elif message.text.lower().startswith("/delete"):
			str_to_db = db.get_from_db(str(message.chat.id),"list_user")
			user = message.text.split()[1]
			if str_to_db.find(user) == -1:
				await message.answer(user + " - –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
			else:
				str_to_db = str_to_db.replace(user + "\n","")
				db.insert_db(message.chat.id,list_user=str_to_db)
				await message.answer(user + " - —É–¥–∞–ª–∏–ª –∏–∑ —Å–ø–∏—Å–∫–∞")


@dp.message_handler(content_types = ['text'])
async def send_text(message: types.Message):
	m_id = message.chat.id
	proxyDict = {
		"http"  : os.environ.get('FIXIE_URL', ''), 
		"https" : os.environ.get('FIXIE_URL', '')}
	if message.text.lower() == '–ø–æ–≥–æ–¥–∫–∞':
		try:
			await message.answer(other.pogodka())
		except:
			await message.answer("–ü–æ–≥–æ–¥–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ 5 –¥–Ω–µ–π –¥–æ —Ç—É—Å—Å–æ–≤–∫–∏.")
	elif message.text.lower() == '/key':
		await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–º–∞–Ω–¥:",reply_markup=kb.markup_key)
	elif message.text.lower() == '–¥–∞—Ç–∞':
		await message.answer(db.get_from_db(str(m_id),"date"))
	elif message.text.lower() == '—Ü–µ–Ω–∞':
		await message.answer(db.get_from_db(str(m_id),"price"))
	elif message.text.lower() == '–∏–Ω—Ñ–æ':
		await message.answer(db.get_from_db(str(m_id),"info"))
	elif message.text.lower() == '–∫—Ç–æ –±—É–¥–µ—Ç?':
		await message.answer(db.get_from_db(str(m_id),"list_user"))
	elif message.text.lower() == '—è –±—É–¥—É':
		str_to_db = db.get_from_db(str(m_id),"list_user")
		user = message.from_user.username
		if user is None:
			user = message.from_user.full_name
		if str_to_db.find(user) == -1:
			if str_to_db == "none":
				db.insert_db(m_id,list_user= "@" + user + "\n")
			else:
				db.insert_db(m_id,list_user=str_to_db + "@" + user + "\n")
			await message.answer("@" + user + " - –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫")
		else:
			await message.answer("@" + user + " - –∏–∑–≤–∏–Ω–∏ –Ω–æ —Ç—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ")
	elif message.text.lower() == '–Ω–µ –±—É–¥—É':
		str_to_db = db.get_from_db(str(m_id),"list_user")
		user = message.from_user.username
		if user is None:
			user = message.from_user.full_name
		if str_to_db.find(user) == -1:
			await message.answer("@" + user + " - —Ç–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
		else:
			str_to_db = str_to_db.replace("@" + user + "\n","")
			db.insert_db(m_id,list_user=str_to_db)
			await message.answer("@" + user + " - —É–¥–∞–ª–∏–ª —Ç–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞")
	elif message.text.lower() == '–≥–µ–æ–ª–æ–∫–∞':
		locale = db.get_from_db(str(m_id),"locale").strip()
		if locale[0].isdigit():
			await message.answer_location(locale.split()[0],locale.split()[1])
		else:
			location = geolocator.geocode(locale, language='ru')
			await message.answer(location)
			await message.answer_location(location.latitude, location.longitude)
	elif message.text.lower() == '–±—é–¥–∂–µ—Ç':
		try:
			# p_price = privat_bank(os.getenv('API_PRIVAT2'),proxyDict, "155325","5168745302334229")
			m_price = banking.mono_bank(m_id)
			await message.answer("–ë—é–¥–∂–µ—Ç —Ç—É—Å–æ–≤–æ—á–∫–∏ üí¥ üí¥ üí¥ : " + m_price)
		except:
			await message.answer('C–µ—Ä–≤–µ—Ä –≤—ã–µ–±—ã–≤–∞–µ—Ç—å—Å—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî üòî üòî')
	elif message.text.lower() == '–æ–ø–ª–∞—Ç–∏—Ç—å':
		await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã :",reply_markup=kb.payment_kb)
		kb.mono_pay.callback_data = kb.mono_pay.callback_data + message.from_user.id
		kb.private_pay.callback_data = kb.private_pay.callback_data + message.from_user.id
		kb.nal_pay.callback_data = kb.nal_pay.callback_data + message.from_user.id
	# elif message.text.lower() == 'ip':
	# 	rer = requests.get('https://ramziv.com/ip', proxies=proxyDict).text
	# 	await message.answer(rer)


@dp.callback_query_handler(lambda c: c.data.startswith('btn1'))
async def process_callback_button1(callback_query: types.CallbackQuery):
		cb_m_id = callback_query.message.chat.id
		if callback_query.data.endswith(str(callback_query.from_user.id)):
			await bot.answer_callback_query(callback_query.id)
			await bot.send_message(cb_m_id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\
, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ lontitude latitude\n–ù–∞–ø—Ä–∏–º–µ—Ä 50.32434 47.32443')
			await Test.locale.set()
			data = int(callback_query.data.split()[1]) + 1
			await bot.edit_message_reply_markup(cb_m_id, data)
			

@dp.callback_query_handler(lambda c: c.data.startswith('btn2'))
async def process_callback_button2(callback_query: types.CallbackQuery):
		cb_m_id = callback_query.message.chat.id
		if callback_query.data.endswith(str(callback_query.from_user.id)):
			await bot.answer_callback_query(callback_query.id)
			await bot.send_message(cb_m_id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å, —Ç–µ–ø–µ—Ä—å \
–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å\n–ù–∞–ø—Ä–∏–º–µ—Ä –ö–∏–µ–≤ –•—Ä–µ—â–∞—Ç–∏–∫ 4')
			await Test.locale.set()
			data = int(callback_query.data.split()[1]) + 1
			await bot.edit_message_reply_markup(cb_m_id, data)

@dp.callback_query_handler(lambda c: c.data == 'monokey')
async def process_callback_mono(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–æ–Ω–æ–±–∞–Ω–∫ \
, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –º–æ–Ω–æ–±–∞–Ω–∫–∞ –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n–ù–∞–ø—Ä–∏–º–µ—Ä Adf42sdf2342442sdf2314432 4441114446179218\n\
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–Ω–æ–±–∞–Ω–∫–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://api.monobank.ua/')
		await Test.cardmono.set()

@dp.callback_query_handler(lambda c: c.data == 'privatekey')
async def process_callback_private(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫\
, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n–ù–∞–ø—Ä–∏–º–µ—Ä Adf42sdf2342442sdf2314432 4441114446179218 \n\
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://api.privatbank.ua/#p24/registration')
		await Test.cardprivate.set()

@dp.callback_query_handler(lambda c: c.data == 'private_pay')
async def process_callback_private_pay(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		info = db.get_from_db(callback_query.message.chat.id,"private")
		price = db.get_from_db(callback_query.message.chat.id,"price")
		if info == "none":
			await bot.send_message(callback_query.message.chat.id,"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫ –Ω–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω")
		else:
			card_num = info.split()[1]
			await bot.send_message(callback_query.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫\
, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {price} –≥—Ä–∏–≤–µ–Ω –Ω–∞ {card_num} –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ 1 –º–∏–Ω—É—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å')

@dp.callback_query_handler(lambda c: c.data == 'mono_pay')
async def process_callback_mono_pay(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		info = db.get_from_db(callback_query.message.chat.id,"mono")
		price = db.get_from_db(callback_query.message.chat.id,"price")
		if info == "none":
			await bot.send_message(callback_query.message.chat.id,"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ú–æ–Ω–æ–±–∞–Ω–∫ –Ω–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω",reply_markup=kb.check_kb)
		else:
			card_num = info.split()[1]
			await bot.send_message(callback_query.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–æ–Ω–æ–±–∞–Ω–∫\
, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {price} –≥—Ä–∏–≤–µ–Ω –Ω–∞ {card_num} . –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏–Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å',reply_markup=kb.check_kb)

@dp.callback_query_handler(lambda c: c.data == 'nal_pay')
async def process_callback_nal_pay(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		info_mono = db.get_from_db(callback_query.message.chat.id,"mono")
		info_private = "none"
		if info_mono == "none":
			card_num = info_mono
		else:
			card_num = info_mono.split()[1]
		price = db.get_from_db(callback_query.message.chat.id,"price")
		await bot.send_message(callback_query.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–∞–ª–∏—á–Ω—ã–µ\
, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {price} –≥—Ä–∏–≤–µ–Ω –Ω–∞ {card_num} –∏–ª–∏ –Ω–∞ {info_private} –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ 1 –º–∏–Ω—É—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å',reply_markup=kb.check_kb)

@dp.callback_query_handler(lambda c: c.data == 'check_pay')
async def process_callback_check_pay(callback_query: types.CallbackQuery):

	Test.pay.state.finish()

if __name__ == '__main__':
	db.start_db()
	executor.start_polling(dp, skip_updates=True)