import logging
import banking
import other
import db
import key as kb
import os

from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = '1054227476:AAHMD3T4QOhQnJ1oBfLYaYI64Rx8O4dKWX8'        # TODO —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–µ
SPOTIFY_TOKEN = '0f6f810bd15b4caeb003ec37402d0e5b'
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'help', 'setinfo', 'setlocate', 
							  'setdate', 'setprice','setcardinfo'])
async def send_command(message: types.Message):
	if message.text.lower() == '/start':
		await message.answer( f'{message.from_user.first_name} , –¥–æ–±—Ä–æ \
		–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ PartyBot!\n –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Å—å –∫ –ø–æ–º–æ—â–∏ /help\n')
	elif message.text.lower() == "/help":
		await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—É—Å–æ–≤–æ—á–∫—É\n \
		/setinfo - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—É—Å–æ–≤–æ—á–∫–∏\n/setlocale - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ\n \
		/setdate - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É\n/setprice - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É\n/setcardinfo \
		- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π (Monobank, PrivatBank)")
	elif message.text.lower() == "/setinfo":
		await message.answer("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Å–æ–≤–æ—á–∫–µ!")
		db.insert_db(message.from_user.id,info=message.text.lower())
	elif message.text.lower() == "/setlocale":
		await message.answer("–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞",
							reply_markup=kb.inline_kb_variant_addres)
	elif message.text.lower() == "/setdate":
		await message.answer("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ç—É—Å–æ–≤–æ—á–∫–∏!")
		db.insert_db(message.from_user.id,date=message.text.lower())
	elif message.text.lower() == "/setprice":
		await message.answer("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–¥–∫–∏ –Ω–∞ —Ç—É—Å–æ–≤–æ—á–∫—É!")
		db.insert_db(message.from_user.id,price=message.text.lower())
	elif message.text.lower() == "/setcardinfo":
		await message.answer("–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –±–∞–Ω–∫!",reply_markup=kb.bank_kb)
		db.insert_db(message.from_user.id,card_info=message.text.lower())


@dp.message_handler(content_types = ['text'])
async def send_text(message: types.Message):
	proxyDict = {
		"http"  : os.environ.get('FIXIE_URL', ''), 
		"https" : os.environ.get('FIXIE_URL', '')}
	if message.text.lower() == '–ø–æ–≥–æ–¥–∫–∞':
		await message.answer(other.pogodka())
	elif message.text.lower() == '–∏–Ω—Ñ–æ':
		await message.answer(db.get_from_db("info"))
	elif message.text.lower() == '–∫—Ç–æ –±—É–¥–µ—Ç?':
		await message.answer(db.get_from_db("list_user"))
	elif message.text.lower() == '–∫—Ç–æ —Å–∫–∏–Ω—É–ª?':
		await message.answer(db.get_from_db("list_user2"))
	elif message.text.lower() == '–≥–µ–æ–ª–æ–∫–∞':
		locale = db.get_from_db("locale").strip()
		if locale[0].isdigit():
			await message.answer(locale)
			await message.answer_location(locale.split()[0],locale.split()[1])
		else:
			try:
				location = geolocator.geocode(locale, language='ru')
				await message.answer(locale)
				await message.answer_location(location.latitude, location.longitude)
			except:
				bot.send_message(message.chat.id, 'C–µ—Ä–≤–µ—Ä –≤—ã–µ–±—ã–≤–∞–µ—Ç—å—Å—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî üòî üòî')
	elif message.text.lower() == '–±—é–¥–∂–µ—Ç': #TODO –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–≤–∞ —Ç—Ä–∞—è –Ω–∞ –æ–¥–∏–Ω
		try:
			await message.answer("–ë—é–¥–∂–µ—Ç —Ç—É—Å–æ–≤–æ—á–∫–∏ üí¥ üí¥ üí¥ " + \
				 privat_bank(os.getenv('API_PRIVAT'), proxyDict, "153753",\
				 "5168745302334229") + " –≥—Ä–∏–≤–µ–Ω")
		except:
			try:
				await message.answer("–ë—é–¥–∂–µ—Ç —Ç—É—Å–æ–≤–æ—á–∫–∏ üí¥ üí¥ üí¥ " + \
					 privat_bank(os.getenv('API_PRIVAT2'),proxyDict, "155325",\
					 "5168745302334229") + " –≥—Ä–∏–≤–µ–Ω")
			except:
				await message.answer('C–µ—Ä–≤–µ—Ä –≤—ã–µ–±—ã–≤–∞–µ—Ç—å—Å—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî üòî üòî')
	elif message.text.lower() == '–æ–ø–ª–∞—Ç–∏—Ç—å':
		await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã :",reply_markup=kb.payment_kb)
	elif message.text.lower() == '–¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ –ø–ª–µ–π–ª–∏—Å—Ç':
		await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:")
	elif message.text.lower() == 'ip':
		rer = requests.get('https://ramziv.com/ip', proxies=proxyDict).text
		await message.answer(rer)
	elif message.text.lower() == 'playmusic':
		
	

	
	

@dp.callback_query_handler(lambda c: c.data == 'btn1')
async def process_callback_button1(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã \
		, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ lontitude latitude\n–ù–∞–ø—Ä–∏–º–µ—Ä 50.32434 47.32443')

@dp.callback_query_handler(lambda c: c.data == 'btn2')
async def process_callback_button2(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å \
		, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å\n–ù–∞–ø—Ä–∏–º–µ—Ä –ö–∏–µ–≤ –•—Ä–µ—â–∞—Ç–∏–∫ 4')

@dp.callback_query_handler(lambda c: c.data == 'monokey')
async def process_callback_mono(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–æ–Ω–æ–±–∞–Ω–∫ \
		, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –º–æ–Ω–æ–±–∞–Ω–∫–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä Adf42sdf2342442sdf2314432\n\
		–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–Ω–æ–±–∞–Ω–∫–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://api.monobank.ua/')

@dp.callback_query_handler(lambda c: c.data == 'privatekey')
async def process_callback_private(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫ \
		, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã \n–ù–∞–ø—Ä–∏–º–µ—Ä Adf42sdf2342442sdf2314432 4441114446179218 \n \
		–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://api.privatbank.ua/#p24/registration')


@dp.callback_query_handler(lambda c: c.data == 'private_pay')
async def process_callback_private_pay(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫ \
		, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {} –≥—Ä–∏–≤–µ–Ω –Ω–∞ {} –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ 1 –º–∏–Ω—É—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å')

@dp.callback_query_handler(lambda c: c.data == 'mono_pay')
async def process_callback_private_pay(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫ \
		, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {} –≥—Ä–∏–≤–µ–Ω –Ω–∞ {} –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ 1 –º–∏–Ω—É—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å')

@dp.callback_query_handler(lambda c: c.data == 'nal_pay')
async def process_callback_private_pay(callback_query: types.CallbackQuery):
		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–∞–ª–∏—á–Ω—ã–µ \
		, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {} –≥—Ä–∏–≤–µ–Ω –Ω–∞ {} –∏–ª–∏ –Ω–∞ {} –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ 1 –º–∏–Ω—É—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å')